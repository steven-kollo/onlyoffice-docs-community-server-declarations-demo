{
  "openapi": "3.0.1",
  "info": {
    "title": "Community Server REST API",
    "version": "latest"
  },
  "paths": {
    "/api/2.0/CalendarApi/calendars/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get calendars",
        "description": "Returns a list of calendars with the events for the current user in the selected period.",
        "parameters": [
          {
            "name": "startDate",
            "in": "path",
            "description": "Period start date",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "Period end date",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/calendar/{calendarId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get calendar events",
        "description": "Returns a calendar with the events for the current user in the selected period.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Period start date",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "Period end date",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/subscriptions": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get subscriptions",
        "description": "Returns a list of all the subscriptions available to the current user.\n\n**Note**: Please note that the list of events in the response will be empty."
      }
    },
    "/api/2.0/CalendarApi/{calendarId}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get a calendar by ID",
        "description": "Returns the detailed information about a calendar with the ID specified in the request.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Delete a calendar",
        "description": "Deletes a calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/view": {
      "put": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Update the calendar view",
        "description": "Updates the calendar display parameters specified in the request for the current user.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/icalurl": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get iCal link",
        "description": "Returns a link to the iCal related to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/caldavurl": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get CalDav link",
        "description": "Returns a link to the CalDav related to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/ical/{signature}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get the iCal feed",
        "description": "Returns the iCal feed associated with the calendar by its ID and signagure specified in the request.\n\n**Note**: To get the feed, you need to use the method returning the iCal feed link (it will generate the necessary signature).",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "signature",
            "in": "path",
            "description": "Signature",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/importIcs": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Import the events from the iCal string",
        "description": "Imports the events from the iCal string to the calendar with the ID specified in the request."
      }
    },
    "/api/2.0/CalendarApi/calendarUrl": {
      "post": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Create a calendar by the iCal link",
        "description": "Creates a calendar by the link to the external iCal feed.\n\n**Note**: Please note that the list of events in the response will be empty."
      }
    },
    "/api/2.0/CalendarApi/icstodo": {
      "post": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "summary": "Create a new task",
        "description": "Creates a new task in the selected calendar with the parameters specified in the request."
      },
      "put": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "summary": "Update a task",
        "description": "Updates the existing task with the parameters specified in the request."
      }
    },
    "/api/2.0/CalendarApi/todos/{todoId}": {
      "delete": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "todoId",
            "in": "path",
            "description": "Task ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/outsideevent": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Add the iCal event",
        "description": "Adds the iCal event to the calendar specified in the request."
      }
    },
    "/api/2.0/CalendarApi/utcoffset": {
      "post": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get the UTC offset",
        "description": "Returns the time offset in the specified time zone compared to Coordinated Universal Time (UTC) for the particular dates."
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Delete the event series",
        "description": "Deletes the event series from the calendar.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/custom": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Delete the specified event(s) from event series",
        "description": "Deletes the specified event(s) from the series of repeating events.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/unsubscribe": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Unsubscribe from the event",
        "description": "Unsubscribes the current user from the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/events/{eventUid}/historybyuid": {
      "get": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Get the iCal event by UID",
        "description": "Returns the iCal event by its UID from the history.",
        "parameters": [
          {
            "name": "eventUid",
            "in": "path",
            "description": "Event UID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/historybyid": {
      "get": {
        "tags": [
          "CalendarApi/Events"
        ],
        "summary": "Get the iCal event by ID",
        "description": "Returns the iCal event by its ID from the history.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/sharing": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get access parameters",
        "description": "Returns the sharing access parameters of the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/sharing": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get default access parameters",
        "description": "Returns the default values for the sharing access parameters."
      }
    },
    "/api/2.0/community/wiki/{name}": {
      "put": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Update a page",
        "description": "Updates a wiki page with the name and content specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "New page name",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Delete a page",
        "description": "Deletes a wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/{page}/comment": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Create a page comment",
        "description": "Creates a comment on the selected wiki page with the content specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Get page comments",
        "description": "Returns a list of all the comments on the wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/file/{name}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Get a file",
        "description": "Returns the detailed information about a file with the name specified in the request from the wiki page 'Files' section.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "File name",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the name specified in the request from the wiki page 'Files' section.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "File name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/comment/preview": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request."
      }
    },
    "/api/2.0/community/wiki/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Update a comment",
        "description": "Updates a comment on the selected wiki page with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/comment": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Add an entity comment",
        "description": "Adds a comment to the selected entity with the content specified in the request."
      }
    },
    "/api/2.0/community/blog": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get posts",
        "description": "Returns a list of all the posts from the portal blogs with the post titles, dates of creation and update, post texts, and authors."
      },
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Create a post",
        "description": "Creates a blog post with the specified title, content, tags and subscription to comments defined in the request body."
      }
    },
    "/api/2.0/community/blog/{postid}": {
      "put": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Update a post",
        "description": "Updates the selected post changing the post title, content or/and tags specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Delete a post",
        "description": "Deletes a post with the ID specified in the request from blogs.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get a post",
        "description": "Returns the detailed information on the blog post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/@self": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get my posts",
        "description": "Returns a list of all the blog posts for the current user with the post titles, dates of creation and update, post texts, and author."
      }
    },
    "/api/2.0/community/blog/@search/{query}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Search posts",
        "description": "Returns a list of blog posts matching the search query specified in the request with the post titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/user/{username}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get user posts",
        "description": "Returns a list of blog posts for the specified user with the post titles, dates of creation and update and post texts.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/tag/{tag}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get posts by tag",
        "description": "Returns a list of blog posts containing the tag specified in the request with the post titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "description": "Tag name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/tag": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the tags used in the blog posts with a number specifying the tag usage."
      }
    },
    "/api/2.0/community/blog/{postid}/comment": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get post comments",
        "description": "Returns a list of all the comments on the blog post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID (GUID)",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Add a post comment",
        "description": "Adds a comment to the post with the ID specified in the request. The parent comment ID can be also specified if needed.\n\n**Note**: Send parentId=00000000-0000-0000-0000-000000000000 or don't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/comment/preview": {
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request."
      }
    },
    "/api/2.0/community/blog/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Update a blog comment",
        "description": "Updates a blog comment specified in the request changing its content.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/blog/comment": {
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "summary": "Add a blog comment",
        "description": "Adds a blog comment with the comment text specified in the request. The parent comment ID can be also specified if needed."
      }
    },
    "/api/2.0/community/bookmark": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get bookmarks",
        "description": "Returns a list of all the portal bookmarks with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      },
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Add a bookmark",
        "description": "Adds a bookmark with the title, description and tags specified in the request."
      }
    },
    "/api/2.0/community/bookmark/@self": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get my bookmarks",
        "description": "Returns a list of all the bookmarks for the current user with the bookmark titles, dates of creation and update, bookmark texts, and author."
      }
    },
    "/api/2.0/community/bookmark/@search/{query}": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Search bookmarks",
        "description": "Returns a list of bookmarks matching the search query specified in the request with the bookmark titles, dates of creation and update, bookmark descriptions, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/bookmark/@favs": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get my favorite bookmarks",
        "description": "Returns a list of favorite bookmarks for the current user with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/tag": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the bookmark tags with a number specifying the tag usage."
      }
    },
    "/api/2.0/community/bookmark/bytag": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get bookmarks by tag",
        "description": "Returns a list of all the bookmarks marked by the tag specified in the request with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/top/recent": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get recent bookmarks",
        "description": "Returns a list of recently added bookmarks with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/top/day": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get top of the day bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current date with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/top/month": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get top of the month bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current month with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/top/week": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get top of the week bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current week with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/top/year": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get top of the year bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current year with the bookmark titles, dates of creation and update, bookmark texts, and authors."
      }
    },
    "/api/2.0/community/bookmark/{id}/comment": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get bookmark comments",
        "description": "Returns a list of all the comments on the bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Add a bookmark comment by bookmark ID",
        "description": "Adds a comment to the bookmark with the ID specified in the request. The parent bookmark ID can be also specified if needed.\n\n**Note**: Send parentId=00000000-0000-0000-0000-000000000000 or doesn't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/bookmark/{id}": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get a bookmark",
        "description": "Returns the detailed information on the bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Remove a bookmark",
        "description": "Removes a bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/bookmark/comment/preview": {
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request."
      }
    },
    "/api/2.0/community/bookmark/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Update a bookmark comment",
        "description": "Updates the selected bookmark comment with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/bookmark/comment": {
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Add a bookmark comment by entity ID",
        "description": "Adds a comment to the entity with the ID specified in the request. The parent bookmark ID can be also specified if needed."
      }
    },
    "/api/2.0/community/bookmark/@favs/{id}": {
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "summary": "Remove a bookmark from favorites",
        "description": "Removes a bookmark from favorites. If after removing the user bookmark, its rating is 0, then the bookmark will be removed completely.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "summary": "Get events",
        "description": "Returns a list of all the portal events with the event titles, dates of creation and update, event texts, and authors."
      },
      "post": {
        "tags": [
          "community/Events"
        ],
        "summary": "Create an event",
        "description": "Creates a new event with the parameters (title, content, type) specified in the request."
      }
    },
    "/api/2.0/community/event/{feedid}": {
      "put": {
        "tags": [
          "community/Events"
        ],
        "summary": "Update an event",
        "description": "Updates the selected event changing the event title, content or/and event type specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Events"
        ],
        "summary": "Delete an event",
        "description": "Deletes an event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "community/Events"
        ],
        "summary": "Get an event",
        "description": "Returns the detailed information on the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event/@self": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "summary": "Get my events",
        "description": "Returns a list of all the events for the current user with the event titles, dates of creation and update, event texts, and author."
      }
    },
    "/api/2.0/community/event/@search/{query}": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "summary": "Search events",
        "description": "Returns a list of events matching the search query specified in the request with the event titles, dates of creation and update, event types, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event/{feedid}/comment": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "summary": "Get event comments",
        "description": "Returns a list of all the comments on the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "community/Events"
        ],
        "summary": "Add an event comment by feed ID",
        "description": "Adds a comment to the event with the ID specified in the request. The parent event ID can be also specified if needed.\n\n**Note**: Send parentId=0 or doesn't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event/{feedid}/subscribe": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "summary": "Comment subscription",
        "description": "Subscribes to or unsubscribes from the comments of the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event/comment/preview": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request."
      }
    },
    "/api/2.0/community/event/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Events"
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "community/Events"
        ],
        "summary": "Update a comment",
        "description": "Updates the selected event comment with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/event/comment": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "summary": "Add an event comment by entity ID",
        "description": "Adds a comment to the entity with the ID specified in the request. The parent event ID can be also specified if needed."
      }
    },
    "/api/2.0/community/forum": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Get forums",
        "description": "Returns a list of all the portal forums with the topic/thread titles, dates of creation and update, post texts, and authors."
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Add a thread to a category",
        "description": "Adds a thread to the category with the ID specified in the request."
      }
    },
    "/api/2.0/community/forum/{threadid}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Get thread topics",
        "description": "Returns a list of all the thread topics with the topic titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Add a topic to a thread",
        "description": "Adds a new topic to the existing thread with a subject, content and topic type specified in the request.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/topic/recent": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Get recently updated topics",
        "description": "Returns a list of all the recently updated topics in the portal forums with the topic titles, dates of creation and update, post texts, and authors."
      }
    },
    "/api/2.0/community/forum/topic/{topicid}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Get topic posts",
        "description": "Returns a list of all the posts of the selected forum topic with the dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Update a topic",
        "description": "Updates a topic with the ID specified in the request, changing a topic subject, making it sticky, or closing it.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Add a post to a topic",
        "description": "Adds a post to the selected topic with a post subject and content specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Delete a topic",
        "description": "Deletes a topic with the ID specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/topic/{topicid}/{postid}": {
      "put": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Update a topic post",
        "description": "Updates a post in the selected topic changing the post subject or/and content specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/@search/{query}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Search topics",
        "description": "Returns a list of topics matching the search query specified in the request with the topic titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/post/{postid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Delete a post",
        "description": "Deletes a post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/thread/{threadid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Delete a thread",
        "description": "Deletes a thread with the ID specified in the request.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/forum/category/{categoryid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "summary": "Delete a category",
        "description": "Deletes a category with the ID specified in the request.",
        "parameters": [
          {
            "name": "categoryid",
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Create a page",
        "description": "Creates a new wiki page with the page name and content specified in the request."
      },
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Get pages",
        "description": "Returns a list of all the pages from the wiki or wiki category specified in the request."
      }
    },
    "/api/2.0/community/wiki/{page}/story": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Get the page history",
        "description": "Returns a list of history changes for a wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/search/byname/{name}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Search pages by name",
        "description": "Returns a list of wiki pages with the name matching the search query specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/search/bycontent/{content}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "summary": "Search pages by content",
        "description": "Returns a list of wiki pages with the content matching the search query specified in the request.",
        "parameters": [
          {
            "name": "content",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Get task by ID",
        "description": "Returns the detailed information about a task with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request."
      },
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Update a task",
        "description": "Updates the selected task with the parameters (title, description, due date, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}/reopen": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Reopen a task",
        "description": "Reopens a task with the ID specified in the request."
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}/close": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Close a task",
        "description": "Closes a task with the ID specified in the request."
      }
    },
    "/api/2.0/crm/task": {
      "post": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Create a task",
        "description": "Creates a task with the parameters (title, description, due date, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/settings/currency": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Get available currencies",
        "description": "Returns a list of all the currencies currently available on the portal."
      },
      "put": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Update a currency",
        "description": "Updates the default CRM currency with the currency specified in the request."
      }
    },
    "/api/2.0/crm/settings/currency/convert": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Convert a currency",
        "description": "Returns a result of converting one currency into another."
      }
    },
    "/api/2.0/crm/settings/currency/summarytable": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Get currency summary table",
        "description": "Returns a summary table with the rates for the currency specified in the request."
      }
    },
    "/api/2.0/crm/contact/mailtohistory/settings": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update the setting for writing mails to the history",
        "description": "Updates the setting for writing mails to the history with the parameter specified in the request."
      }
    },
    "/api/2.0/crm/settings/organisation/base": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "summary": "Update a company name",
        "description": "Updates a company name with the one specified in the request."
      }
    },
    "/api/2.0/crm/settings/organisation/address": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "summary": "Update a company address",
        "description": "Updates a company address with the one specified in the request."
      }
    },
    "/api/2.0/crm/settings/organisation/logo": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "summary": "Update the organization logo setting",
        "description": "Updates the organization logo setting with the parameter specified in the request."
      },
      "get": {
        "tags": [
          "crm/Organization"
        ],
        "summary": "Get an organization logo",
        "description": "Returns an organization logo with the ID specified in the request in the base64 format."
      }
    },
    "/api/2.0/crm/settings/webformkey/change": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update the web form key",
        "description": "Updates the website contact form key."
      }
    },
    "/api/2.0/crm/voip/numbers/available": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get filtered phone numbers",
        "description": "Returns all the available phone numbers matching the parameters specified in the request."
      }
    },
    "/api/2.0/crm/voip/numbers/unlinked": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get unlinked phone numbers",
        "description": "Returns a list of all the unlinked phone numbers."
      }
    },
    "/api/2.0/crm/voip/numbers/existing": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get all phone numbers",
        "description": "Returns all the existing phone numbers."
      }
    },
    "/api/2.0/crm/voip/numbers": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Buy a phone number",
        "description": "Buys a phone number specified in the request."
      }
    },
    "/api/2.0/crm/voip/numbers/link": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Link a phone number",
        "description": "Links a new phone number with the ID specified in the request to the VoIP provider."
      }
    },
    "/api/2.0/crm/voip/numbers/{numberId:\\w+}": {
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Delete a phone number",
        "description": "Deletes a phone number with the ID specified in the request."
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get a phone number",
        "description": "Returns a phone number with the ID specified in the request."
      }
    },
    "/api/2.0/crm/voip/numbers/current": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get the current phone number",
        "description": "Returns the current phone number."
      }
    },
    "/api/2.0/crm/voip/token": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get a phone number token",
        "description": "Returns a token for the current phone number."
      }
    },
    "/api/2.0/crm/voip/numbers/settings": {
      "put": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Update the VoIP settings",
        "description": "Updates the VoIP settings with the parameters specified in the request."
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get the VoIP settings",
        "description": "Returns the VoIP settings."
      }
    },
    "/api/2.0/crm/voip/uploads": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get the links to the uploaded files",
        "description": "Returns the links to the VoIP uploaded files."
      },
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Delete an uploaded file",
        "description": "Deletes an uploaded file with the name specified in the request."
      }
    },
    "/api/2.0/crm/voip/numbers/{numberId:\\w+}/oper": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get operators",
        "description": "Returns the operators of the phone number with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Delete an operator",
        "description": "Deletes an operator from the phone number with the ID specified in the request."
      }
    },
    "/api/2.0/crm/voip/call": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Make a call",
        "description": "Makes a call to the phone number specified in the request."
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/answer": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Answer a call",
        "description": "Answers a phone call with the ID specified in the request."
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/reject": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Reject a call",
        "description": "Rejects a phone call with the ID specified in the request."
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/redirect": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Redirect a call",
        "description": "Redirects a phone call with the ID specified in the request to the specified phone number."
      }
    },
    "/api/2.0/crm/voip/price/{callId:\\w+}": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Save a call price",
        "description": "Saves a price for the call with the ID specified in the request."
      }
    },
    "/api/2.0/crm/voip/call/missed": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get missed calls",
        "description": "Returns a list of all the missed calls."
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "summary": "Get a call",
        "description": "Returns the detailed information about a phone call with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/bycontact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Get contact opportunities",
        "description": "Returns a list of all the opportunities for the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/stage": {
      "post": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Create an opportunity stage",
        "description": "Creates an opportunity stage with the parameters (title, description, success probability, etc.) specified in the request."
      },
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Get opportunity stages",
        "description": "Returns a list of all the opportunity stages available on the portal."
      }
    },
    "/api/2.0/crm/opportunity/stage/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Update an opportunity stage",
        "description": "Updates the selected opportunity stage with the parameters (title, description, success probability, etc.) specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Delete an opportunity stage",
        "description": "Deletes an opportunity stage with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/stage/{id:[0-9]+}/color": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Update an opportunity stage color",
        "description": "Updates the selected opportunity stage with a color specified in the request."
      }
    },
    "/api/2.0/crm/history/category": {
      "post": {
        "tags": [
          "crm/History"
        ],
        "summary": "Create a history category",
        "description": "Creates a new history category with the parameters (title, description, etc.) specified in the request."
      },
      "get": {
        "tags": [
          "crm/History"
        ],
        "summary": "Get history categories",
        "description": "Returns a list of all the history categories available on the portal."
      }
    },
    "/api/2.0/crm/history/category/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/History"
        ],
        "summary": "Update a history category",
        "description": "Updates the selected history category with the parameters (title, description, etc.) specified in the request."
      },
      "delete": {
        "tags": [
          "crm/History"
        ],
        "summary": "Delete a history category",
        "description": "Deletes a history category with the ID specified in the request."
      }
    },
    "/api/2.0/crm/history/category/{id:[0-9]+}/icon": {
      "put": {
        "tags": [
          "crm/History"
        ],
        "summary": "Update a history category icon",
        "description": "Updates an icon of a history category with the ID specified in the request."
      }
    },
    "/api/2.0/crm/task/category": {
      "post": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Create a task category",
        "description": "Creates a new task category with the parameters (title, description, etc.) specified in the request."
      },
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Get task categories",
        "description": "Returns a list of all the task categories available on the portal."
      }
    },
    "/api/2.0/crm/task/category/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Update a task category",
        "description": "Updates the selected task category with the parameters (title, description, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/task/category/{id:[0-9]+}/icon": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Update a task category icon",
        "description": "Updates an icon of the task category with the ID specified in the request."
      }
    },
    "/api/2.0/crm/task/category/{categoryid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Delete a task category",
        "description": "Deletes a task category with the ID specified in the request."
      },
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "summary": "Get a task category",
        "description": "Returns a task category with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/status": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Create a contact status",
        "description": "Creates a new contact status with the parameters (title, description, etc.) specified in the request."
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact statuses",
        "description": "Returns a list of all the contact statuses available on the portal."
      }
    },
    "/api/2.0/crm/contact/status/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a contact status",
        "description": "Updates the selected contact status with the parameters (title, description, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/contact/status/{id:[0-9]+}/color": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a contact status color",
        "description": "Updates a color of the selected contact status with a new color specified in the request."
      }
    },
    "/api/2.0/crm/contact/status/{contactStatusid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a contact status",
        "description": "Deletes a contact status with the ID specified in the request."
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get a contact status",
        "description": "Returns a contact status with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/type": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Create a contact type",
        "description": "Creates a new contact type with the parameters specified in the request."
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact types",
        "description": "Returns a list of all the contact types available on the portal."
      }
    },
    "/api/2.0/crm/contact/type/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a contact type",
        "description": "Updates the selected contact type with the parameters specified in the request."
      }
    },
    "/api/2.0/crm/contact/type/{contactTypeid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a contact type",
        "description": "Deletes a contact type with the ID specified in the request."
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get a contact type",
        "description": "Returns a contact type with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/stage/{stageid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Get an opportunity stage",
        "description": "Returns an opportunity stage with the ID specified in the request."
      }
    },
    "/api/2.0/crm/history/filter": {
      "get": {
        "tags": [
          "crm/History"
        ],
        "summary": "Get filtered events",
        "description": "Returns a list of all the events matching the parameters specified in the request."
      }
    },
    "/api/2.0/crm/history/{id:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/History"
        ],
        "summary": "Delete an event",
        "description": "Deletes an event with the ID specified in the request and all the files associated with this event."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/files/text": {
      "post": {
        "tags": [
          "crm/Files"
        ],
        "summary": "Create a text file",
        "description": "Creates a text (.txt) file in the selected folder with the title and contents specified in the request."
      }
    },
    "/api/2.0/crm/files/root": {
      "get": {
        "tags": [
          "crm/Files"
        ],
        "summary": "Get root folder ID",
        "description": "Returns the ID of the root folder used to store the CRM module files."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/files": {
      "get": {
        "tags": [
          "crm/Files"
        ],
        "summary": "Get entity files",
        "description": "Returns a list of all the files for the entity with the ID and type specified in the request."
      }
    },
    "/api/2.0/crm/files/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Files"
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the ID specified in the request."
      }
    },
    "/api/2.0/crm/report/files": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "summary": "Get report files",
        "description": "Returns a list of all the user report files."
      }
    },
    "/api/2.0/crm/report/file/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Reports"
        ],
        "summary": "Delete a report file",
        "description": "Deletes a report file with the ID specified in the request."
      }
    },
    "/api/2.0/crm/report/status": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "summary": "Get the report generation status",
        "description": "Returns a status of the report generation task."
      }
    },
    "/api/2.0/crm/report/terminate": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "summary": "Terminate the report generation",
        "description": "Terminates the report generation task."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag/{entityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Get entity tags",
        "description": "Returns a list of all the tags related to the entity with the ID and type specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/tag": {
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Get contact tags",
        "description": "Returns a list of all the tags for the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Create a tag",
        "description": "Creates a tag for the selected entity with a tag name specified in the request."
      },
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Get entity type tags",
        "description": "Returns a list of all the tags associated with the entity type specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Delete a tag from entities",
        "description": "Deletes the selected tag from the entities with the type specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag/unused": {
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Delete unused tags",
        "description": "Deletes all the unused tags from the entities with the type specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/tag": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Add a tag to the entity",
        "description": "Adds the selected tag to the entity with the type and ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Delete an entity tag",
        "description": "Deletes the selected tag from the entity with the type and ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(company|person)}/{entityid:[0-9]+}/tag/group": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Add a tag to the entity and related contacts",
        "description": "Adds the selected tag to the entity (company or person) specified in the request and to all the related contacts."
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "summary": "Delete a tag from the entity and related contacts",
        "description": "Deletes the selected tag from the entity (company or person) specified in the request and from all the related contacts."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get a contact by ID",
        "description": "Returns the detailed information about a contact with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a contact",
        "description": "Deletes a contact with the ID specified in the request from the portal."
      }
    },
    "/api/2.0/crm/contact/project/{projectid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contacts by project ID",
        "description": "Returns contacts for the project with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/project/{projectid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Link a contact to the project",
        "description": "Links the selected contact to the project with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Remove a contact from the project",
        "description": "Removes a link to the selected project from the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/opportunity/{opportunityid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Add a contact opportunity",
        "description": "Adds the selected opportunity to the contact with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a contact opportunity",
        "description": "Deletes the selected opportunity from the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/company/{companyid:[0-9]+}/person": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get company persons",
        "description": "Returns a list of all the persons linked to the company with the ID specified in the request."
      },
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Add a person to the company",
        "description": "Adds the selected person to the company with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a person from the company",
        "description": "Deletes the selected person from the company with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/changephotobyurl": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Change a contact photo by URL",
        "description": "Changes a photo using its URL for the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/merge": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Merge contacts",
        "description": "Merges two contacts specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a contact status by ID",
        "description": "Updates a status of the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/company/{companyid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a company status",
        "description": "Updates a status of the selected company and all its participants."
      }
    },
    "/api/2.0/crm/contact/person/{personid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update a person and his company status",
        "description": "Updates a status of the selected person, related company and all its participants."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/access": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact access rights",
        "description": "Returns access rights of the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/avatar": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete a contact avatar",
        "description": "Deletes an avatar of the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/definitions": {
      "get": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Get custom fields",
        "description": "Returns a list of descriptions for all the existing custom fields."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/{entityid:[0-9]+}/customfield": {
      "get": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Get entity custom fields",
        "description": "Returns a list of all the custom fields for the entity type and ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/{entityid:[0-9]+}/customfield/{fieldid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Set an entity custom field",
        "description": "Sets the selected custom field to the entity with type and ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield": {
      "post": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Create a custom field",
        "description": "Creates a new custom field with the parameters (entity type, field title, type, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Update a custom field",
        "description": "Updates the selected custom field with the parameters (entity type, field title, type, etc.) specified in the request.\n\n**Note**: You can update field if there are no related elements. If such elements exist, only label and mask will be updated. Other parameters will be ignored."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/{fieldid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Custom fields"
        ],
        "summary": "Delete a custom field",
        "description": "Deletes a custom field with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Get an opportunity",
        "description": "Returns the detailed information about an opportunity with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Delete an opportunity",
        "description": "Deletes an opportunity with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/stage/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Update an opportunity stage by ID",
        "description": "Updates the selected opportunity to the stage with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/contact": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Get opportunity contacts",
        "description": "Returns a list of all the contacts related to the opportunity with the ID specified in the request."
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/contact/{contactid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Add an opportunity contact",
        "description": "Adds the selected contact to the opportunity with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "summary": "Delete an opportunity contact",
        "description": "Deletes the selected contact from the opportunity with the ID specified in the request."
      }
    },
    "/api/2.0/crm/currency/rates": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Get currency rates",
        "description": "Returns a list of all the currency rates."
      },
      "post": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Create a currency rate",
        "description": "Creates a new currency rate with the parameters specified in the request."
      }
    },
    "/api/2.0/crm/currency/rates/{id:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Get a currency rate by ID",
        "description": "Returns a currency rate by ID."
      },
      "put": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Update a currency rate",
        "description": "Updates a currency rate with the parameters specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Delete a currency rate",
        "description": "Deletes a currency rate with the ID specified in the request."
      }
    },
    "/api/2.0/crm/currency/rates/{fromCurrency}/{toCurrency}": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "summary": "Get a currency rate by currencies",
        "description": "Returns a currency rate by currencies.",
        "parameters": [
          {
            "name": "fromCurrency",
            "in": "path",
            "description": "Currency to convert",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toCurrency",
            "in": "path",
            "description": "Currency into which the original currency will be converted",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/crm/invoice/{invoiceid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get an invoice by ID",
        "description": "Returns the detailed information about an invoice with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Delete an invoice",
        "description": "Deletes an invoice with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoice/sample": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get an invoice sample",
        "description": "Returns the detailed information about an invoice sample."
      }
    },
    "/api/2.0/crm/invoice/jsondata/{invoiceid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get the invoice JSON data",
        "description": "Returns the JSON data of an invoice with the ID specified in the request."
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity)}/invoicelist/{entityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get entity invoices",
        "description": "Returns a list of all the invoices related to the entity with the ID and type specified in the request."
      }
    },
    "/api/2.0/crm/invoice/{invoiceid:[0-9]+}/pdf": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get the invoice pdf file",
        "description": "Returns the pdf file related to an invoice with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoice/converter/data": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get invoice converter data",
        "description": "Returns information about the generation of the invoice pdf file."
      }
    },
    "/api/2.0/crm/invoice/bynumber/exist": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Check invoice existence by number",
        "description": "Returns the existence of an invoice with the number specified in the request."
      }
    },
    "/api/2.0/crm/invoice/bynumber": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get an invoice by number",
        "description": "Returns the detailed information about an invoice with the number specified in the request."
      }
    },
    "/api/2.0/crm/invoiceitem/{invoiceitemid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get an invoice item by ID",
        "description": "Returns the detailed information about an invoice item with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoiceline": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Create an invoice line",
        "description": "Creates an invoice line with the parameters (invoice ID, invoice item ID, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/invoiceline/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Update an invoice line",
        "description": "Updates the selected invoice line with the parameters (invoice ID, invoice item ID, etc.) specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Delete an invoice line",
        "description": "Deletes an invoice line with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoiceitem": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Create an invoice item",
        "description": "Creates an invoice item with the parameters (title, description, price, etc.) specified in the request."
      }
    },
    "/api/2.0/crm/invoiceitem/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Update an invoice item",
        "description": "Updates the selected invoice item with the parameters (title, description, price, etc.) specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Delete an invoice item",
        "description": "Deletes an invoice item with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoice/tax": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get invoice taxes",
        "description": "Returns a list of invoice taxes."
      },
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Create an invoice tax",
        "description": "Creates an invoice tax with the parameters (name, description, rate) specified in the request."
      }
    },
    "/api/2.0/crm/invoice/tax/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Update an invoice tax",
        "description": "Updates the selected invoice tax with the parameters (name, description, rate) specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Delete an invoice tax",
        "description": "Deletes an invoice tax with the ID specified in the request."
      }
    },
    "/api/2.0/crm/invoice/settings": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Get the default invoice settings",
        "description": "Returns the default invoice settings."
      }
    },
    "/api/2.0/crm/invoice/settings/name": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Save the invoice number default settings",
        "description": "Saves the default settings for the invoice number specified in the request."
      }
    },
    "/api/2.0/crm/invoice/settings/terms": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "summary": "Save the invoice terms default settings",
        "description": "Saves the default settings for the invoice terms specified in the request."
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/close": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Close a case",
        "description": "Closes a case with the ID specified in the request."
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/reopen": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Reopen a case",
        "description": "Reopens a case with the ID specified in the request."
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Get a case by ID",
        "description": "Returns the detailed information about a case with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Delete a case",
        "description": "Deletes a case with the ID specified in the request."
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/contact": {
      "get": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Get case contacts",
        "description": "Returns a list of all the contacts related to the case with the ID specified in the request."
      },
      "post": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Add a case contact",
        "description": "Adds the selected contact to the case with the ID specified in the request."
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/contact/{contactid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Cases"
        ],
        "summary": "Delete a case contact",
        "description": "Deletes the selected contact from the case with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/data/{infoType}/category": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact categories by information type",
        "description": "Returns a list of all the available contact categories of the specified information type.",
        "parameters": [
          {
            "name": "infoType",
            "in": "path",
            "description": "Contact information type",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/crm/contact/data/infoType": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact information types",
        "description": "Returns a list of all the available contact information types."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact information",
        "description": "Returns the detailed information on the contact with the ID specified in the request."
      },
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Add contact information",
        "description": "Adds the information with the parameters specified in the request to the contact with the selected ID."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data/{id:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact information by ID",
        "description": "Returns the detailed contact information with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Delete contact information",
        "description": "Deletes the selected information from the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/addressdata": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Add contact address information",
        "description": "Adds the address information to the contact with the ID specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/addressdata/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Update contact address information",
        "description": "Updates the contact address information with the parameter specified in the request."
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data/{infoType}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "summary": "Get contact information by its type",
        "description": "Returns the detailed contact information by the information type specified in the request.",
        "parameters": [
          {
            "name": "infoType",
            "in": "path",
            "description": "Contact information type",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/settings/favorites": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Display the \"Favorites\" folder",
        "description": "Displays the \"Favorites\" folder."
      }
    },
    "/api/2.0/files/settings/templates": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Display the \"Templates\" folder",
        "description": "Displays the \"Templates\" folder."
      }
    },
    "/api/2.0/files/settings/autocleanup": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Update the trash bin auto-clearing setting",
        "description": "Updates the trash bin auto-clearing setting."
      },
      "get": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Get the auto-clearing setting properties",
        "description": "Returns the auto-clearing setting properties."
      }
    },
    "/api/2.0/files/settings/downloadtargz": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Change the archive format",
        "description": "Changes the format of the downloaded archive from .zip to .tar.gz."
      }
    },
    "/api/2.0/files/docservice": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Check the document service URL",
        "description": "Checks the document service location."
      },
      "get": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Get the document service URL",
        "description": "Returns the address of the connected editors."
      }
    },
    "/api/2.0/files/@root": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get filtered sections",
        "description": "Returns all the sections matching the parameters specified in the request."
      }
    },
    "/api/2.0/files/@my": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"My documents\" section",
        "description": "Returns the detailed list of files and folders located in the \"My documents\" section."
      }
    },
    "/api/2.0/files/@projects": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"In projects\" section",
        "description": "Returns the detailed list of files and folders located in the \"In projects\" section."
      }
    },
    "/api/2.0/files/@common": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Common\" section",
        "description": "Returns the detailed list of files and folders located in the \"Common\" section."
      }
    },
    "/api/2.0/files/@share": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Shared with me\" section",
        "description": "Returns the detailed list of files and folders located in the \"Shared with me\" section."
      }
    },
    "/api/2.0/files/@recent": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Recent\" section",
        "description": "Returns the detailed list of files located in the \"Recent\" section."
      }
    },
    "/api/2.0/files/@favorites": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Favorites\" section",
        "description": "Returns the detailed list of files and folders located in the \"Favorites\" section."
      }
    },
    "/api/2.0/files/@templates": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Templates\" section",
        "description": "Returns the detailed list of files located in the \"Templates\" section."
      }
    },
    "/api/2.0/files/@trash": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the \"Trash\" section",
        "description": "Returns the detailed list of files and folders located in the \"Trash\" section."
      }
    },
    "/api/2.0/files/{folderId}": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get a folder by ID",
        "description": "Returns the detailed list of files and folders located in the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/{fileId}/update": {
      "put": {
        "tags": [
          "files/Files"
        ],
        "summary": "Update file content",
        "description": "Updates the content of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/saveediting": {
      "put": {
        "tags": [
          "files/Files"
        ],
        "summary": "Save file edits",
        "description": "Saves edits to a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/startedit": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "summary": "Start file editing",
        "description": "Informs about opening a file with the ID specified in the request for editing, locking it from being deleted or moved (this method is called by the mobile editors).",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/trackeditfile": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Track file editing",
        "description": "Tracks file changes when editing.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/openedit": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Open a file",
        "description": "Returns the initialization configuration of a file to open it in the editor.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/{folderId}/upload/create_session": {
      "post": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Chunked upload",
        "description": "Creates a session to upload large files in multiple chunks to the folder with the ID specified in the request.\n\n**Note**: Each chunk can have different length but the length should be multiple of <b>512</b> and greater or equal to <b>10 mb</b>. Last chunk can have any size.\n            After the initial response to the request with the <b>200 OK</b> status, you must get the <em>location</em> field value from the response. Send all your chunks to this location.\n            Each chunk must be sent in the exact order the chunks appear in the file.\n            After receiving each chunk, the server will respond with the current information about the upload session if no errors occurred.\n            When the number of bytes uploaded is equal to the number of bytes you sent in the initial request, the server responds with the <b>201 Created</b> status and sends you information about the uploaded file.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/folder/{folderId}": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Create a folder",
        "description": "Creates a new folder with the title specified in the request. The parent folder ID can be also specified.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Parent folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Rename a folder",
        "description": "Renames the selected folder with a new title specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the folder information",
        "description": "Returns the detailed information about a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Delete a folder",
        "description": "Deletes a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/@my/file": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "summary": "Create a file in the \"My documents\" section",
        "description": "Creates a new file in the \"My documents\" section with the title specified in the request.\n\n**Note**: If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title."
      }
    },
    "/api/2.0/files/{folderId}/file": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "summary": "Create a file",
        "description": "Creates a new file in the specified folder with the title specified in the request.\n\n**Note**: If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/folder/{folderId}/path": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "summary": "Get the folder path",
        "description": "Returns a path to the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Get the file information",
        "description": "Returns the detailed information about a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "summary": "Update a file",
        "description": "Updates the information of the selected file with the parameters specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "files/Files"
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/copyas": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "summary": "Copy a file",
        "description": "Copies (and converts if possible) an existing file to the specified folder.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/checkconversion": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Start file conversion",
        "description": "Starts a conversion operation of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Get conversion status",
        "description": "Checks the conversion status of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/presigneduri": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Get file download link",
        "description": "Returns a link to download a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/fileops/terminate": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Finish active operations",
        "description": "Finishes all the active operations."
      }
    },
    "/api/2.0/files/fileops": {
      "get": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Get active operations",
        "description": "Returns a list of all the active operations."
      }
    },
    "/api/2.0/files/fileops/emptytrash": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Empty the \"Trash\" folder",
        "description": "Deletes all the files and folders from the \"Trash\" folder."
      }
    },
    "/api/2.0/files/file/{fileId}/history": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Get file versions",
        "description": "Returns the detailed information about all the available file versions with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "summary": "Change version history",
        "description": "Changes version history of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/file/{fileId}/share": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Get the shared file information",
        "description": "Returns the detailed information about the shared file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/folder/{folderId}/share": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Get the shared folder information",
        "description": "Returns the detailed information about the shared folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/{fileId}/sharedlink": {
      "put": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Get the shared link",
        "description": "Returns an external link to the shared file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/sharedlink/password": {
      "post": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Set a cookie for a password-protected external link",
        "description": "Sets a cookie after verifying the password for a password-protected external link and returns a link to the shared file."
      }
    },
    "/api/2.0/files/{fileId}/sharedlink/{linkId}/password": {
      "post": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Get a token for a password-protected external link",
        "description": "Returns a token after verifying the password or password hash for a password-protected external link.\n\n**Note**: The token is used in the cookies with the 'sharelink[linkId]' name when calling API methods.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/{fileId}/sharedlink/template": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Get the shared link template",
        "description": "Returns a new unsaved link object to the file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/{fileId}/properties": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Get file properties",
        "description": "Returns file properties of the specified file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "summary": "Save file properties to a file",
        "description": "Saves file properties to the specified file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/thirdparty/capabilities": {
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "summary": "Get providers",
        "description": "Returns a list of the available providers.\n\n**Note**: List of provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive."
      }
    },
    "/api/2.0/files/thirdparty": {
      "post": {
        "tags": [
          "files/Third-party integration"
        ],
        "summary": "Save a third-party account",
        "description": "Saves the third-party storage service account. For WebDav, Yandex, kDrive and SharePoint, the login and password are used for authentication. For other providers, the authentication is performed using a token received via OAuth 2.0.\n\n**Note**: List of provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive."
      },
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "summary": "Get third-party services",
        "description": "Returns a list of all the connected third-party services."
      }
    },
    "/api/2.0/files/thirdparty/common": {
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "summary": "Get common third-party services",
        "description": "Returns a list of the third-party services connected to the \"Common\" section."
      }
    },
    "/api/2.0/files/thirdparty/{providerId:[0-9]+}": {
      "delete": {
        "tags": [
          "files/Third-party integration"
        ],
        "summary": "Remove a third-party account",
        "description": "Removes the third-party storage service account with the ID specified in the request."
      }
    },
    "/api/2.0/files/@search/{query}": {
      "get": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Search for files and folders",
        "description": "Searches for files and folders by the query specified in the request.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query string",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/files/storeoriginal": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Store original formats",
        "description": "Stores files in the original formats as well when uploading and converting."
      }
    },
    "/api/2.0/files/updateifexist": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Update a file version if it exists",
        "description": "Updates a file version if a file with such a name already exists."
      }
    },
    "/api/2.0/files/displayRecent": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "summary": "Display the \"Recent\" folder",
        "description": "Displays the \"Recent\" folder."
      }
    },
    "/api/2.0/people/@self": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Get my profile",
        "description": "Returns the detailed information about the current user profile."
      }
    },
    "/api/2.0/people/status/{status}": {
      "get": {
        "tags": [
          "people/User status"
        ],
        "summary": "Get profiles by status",
        "description": "Returns a list of profiles filtered by user status.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/{username}": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Get a profile by user name",
        "description": "Returns the detailed information about a profile of the user with the name specified in the request.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/email": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Get a profile by user email",
        "description": "Returns the detailed information about a profile of the user with the email specified in the request."
      }
    },
    "/api/2.0/people/@search/{query}": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "summary": "Search user profiles",
        "description": "Returns a list of profiles for all the portal users matching the search query.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/search": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "summary": "Search users",
        "description": "Returns a list of users matching the search query."
      }
    },
    "/api/2.0/people/status/{status}/search": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "summary": "Search users by status filter",
        "description": "Returns a list of users matching the status filter and search query.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/import/save": {
      "post": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Import users",
        "description": "Imports the new portal users with the first name, last name, and email address."
      }
    },
    "/api/2.0/people/import/status": {
      "get": {
        "tags": [
          "people/User status"
        ],
        "summary": "Get a user status",
        "description": "Returns a status of the current user."
      }
    },
    "/api/2.0/people/{userid}": {
      "delete": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/{userid}/photo": {
      "get": {
        "tags": [
          "people/Photos"
        ],
        "summary": "Get a user photo",
        "description": "Returns a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "people/Photos"
        ],
        "summary": "Update a user photo",
        "description": "Updates a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "people/Photos"
        ],
        "summary": "Delete a user photo",
        "description": "Deletes a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/{userid}/photo/thumbnails": {
      "post": {
        "tags": [
          "people/Photos"
        ],
        "summary": "Create a photo thumbnail",
        "description": "Creates a photo thumbnail by coordinates of the original image specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/{userid}/email": {
      "put": {
        "tags": [
          "people/Email"
        ],
        "summary": "Change a user email",
        "description": "Sets a new email to the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/{userid}/password": {
      "put": {
        "tags": [
          "people/Password"
        ],
        "summary": "Change a user password",
        "description": "Sets a new password to the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/people/self/delete": {
      "put": {
        "tags": [
          "people/Profiles"
        ],
        "summary": "Send the deletion instructions",
        "description": "Sends instructions for deleting a user profile."
      }
    },
    "/api/2.0/people/birthdays/reminder": {
      "post": {
        "tags": [
          "people/Birthday"
        ],
        "summary": "Birthday subscription",
        "description": "Subscribes to or unsubscribes from the birthday of the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/reassign/progress": {
      "get": {
        "tags": [
          "people/User data"
        ],
        "summary": "Get the reassignment progress",
        "description": "Returns the progress of the started data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/reassign/terminate": {
      "put": {
        "tags": [
          "people/User data"
        ],
        "summary": "Terminate the data reassignment",
        "description": "Terminates the data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/reassign/start": {
      "post": {
        "tags": [
          "people/User data"
        ],
        "summary": "Start the data reassignment",
        "description": "Starts the data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/remove/progress": {
      "get": {
        "tags": [
          "people/User data"
        ],
        "summary": "Get the deletion progress",
        "description": "Returns the progress of the started data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/remove/terminate": {
      "put": {
        "tags": [
          "people/User data"
        ],
        "summary": "Terminate the data deletion",
        "description": "Terminates the data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/remove/start": {
      "post": {
        "tags": [
          "people/User data"
        ],
        "summary": "Start the data deletion",
        "description": "Starts the data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/mail/conversations/link/crm/status": {
      "get": {
        "tags": [
          "mail/Conversations"
        ],
        "summary": "Check a conversation CRM status",
        "description": "Checks if a conversation is CRM linked or not by message ID."
      }
    },
    "/api/2.0/mail/folders": {
      "get": {
        "tags": [
          "mail/Folders"
        ],
        "summary": "Get the default folders",
        "description": "Returns a list of default folders."
      }
    },
    "/api/2.0/mail/folders/{folderid:[0-9]+}/messages": {
      "delete": {
        "tags": [
          "mail/Folders"
        ],
        "summary": "Remove folder messages",
        "description": "Removes all the messages from the trash or spam folder."
      }
    },
    "/api/2.0/mail/userfolders": {
      "post": {
        "tags": [
          "mail/Folders"
        ],
        "summary": "Create a folder",
        "description": "Creates a user folder with the name specified in the request."
      }
    },
    "/api/2.0/mail/userfolders/{id}": {
      "delete": {
        "tags": [
          "mail/Folders"
        ],
        "summary": "Delete a folder",
        "description": "Deletes a user folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/userfolders/bymail": {
      "get": {
        "tags": [
          "mail/Folders"
        ],
        "summary": "Get a folder by mail ID",
        "description": "Returns a user folder by the mail ID specified in the request."
      }
    },
    "/api/2.0/mail/display_images/addresses": {
      "get": {
        "tags": [
          "mail/Images"
        ],
        "summary": "Get trusted image addresses",
        "description": "Returns a list of all the trusted addresses for image displaying."
      }
    },
    "/api/2.0/mail/display_images/address": {
      "post": {
        "tags": [
          "mail/Images"
        ],
        "summary": "Add the trusted image address",
        "description": "Adds an image address specified in the request to the list of trusted image addresses."
      },
      "delete": {
        "tags": [
          "mail/Images"
        ],
        "summary": "Remove the trusted image address",
        "description": "Removes an image address specified in the request from the list of trusted image addresses."
      }
    },
    "/api/2.0/mail/messages/reassign": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "summary": "Reassign drafts/templates",
        "description": "Reassigns drafts/templates to the selected email."
      }
    },
    "/api/2.0/mail/messages/{messageid:[0-9]+}/attachments/{attachmentid:[0-9]+}": {
      "delete": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Delete an attachment",
        "description": "Deletes the selected attachment from the message with the ID specified in the request."
      }
    },
    "/api/2.0/mail/messages/template": {
      "get": {
        "tags": [
          "mail/Messages"
        ],
        "summary": "Get a message template",
        "description": "Returns a message template - empty message in the JSON format."
      }
    },
    "/api/2.0/mail/messages/{id:[0-9]+}/document": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Attach a document",
        "description": "Attaches a document to the message with the ID specified in the request."
      }
    },
    "/api/2.0/mail/tags": {
      "get": {
        "tags": [
          "mail/Tags"
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the tags used in the Mail module."
      }
    },
    "/api/2.0/mail/tags/{id}": {
      "delete": {
        "tags": [
          "mail/Tags"
        ],
        "summary": "Delete a tag",
        "description": "Deletes a tag with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/filters": {
      "get": {
        "tags": [
          "mail/Filters"
        ],
        "summary": "Get filters",
        "description": "Returns a list of filters used in all the mails."
      },
      "post": {
        "tags": [
          "mail/Filters"
        ],
        "summary": "Create a filter",
        "description": "Creates a new filter with the parameters specified in the request."
      },
      "put": {
        "tags": [
          "mail/Filters"
        ],
        "summary": "Update a filter",
        "description": "Updates the selected filter with the parameters specified in the request."
      }
    },
    "/api/2.0/mail/filters/{id}": {
      "delete": {
        "tags": [
          "mail/Filters"
        ],
        "summary": "Delete a filter",
        "description": "Deletes a filter with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/filters/{id}/apply": {
      "get": {
        "tags": [
          "mail/Filters"
        ],
        "summary": "Apply a filter",
        "description": "Applies a filter to the existing messages.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/settings": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the mail common settings",
        "description": "Returns the mail common settings."
      }
    },
    "/api/2.0/mail/settings/conversationsEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the \"Enable Conversations\" flag",
        "description": "Returns a flag that specifies whether to group messages into conversations or not."
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Set the \"Enable Conversations\" flag",
        "description": "Sets a flag that specifies whether to group messages into conversations or not."
      }
    },
    "/api/2.0/mail/settings/alwaysDisplayImages": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the \"Always display external images\" flag",
        "description": "Returns a flag that specifies whether to display external images in the messages or not."
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Set the \"Always display external images\" flag",
        "description": "Sets a flag that specifies whether to display external images in the messages or not."
      }
    },
    "/api/2.0/mail/settings/cacheMessagesEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the \"Cache unread messages\" flag",
        "description": "Returns a flag that specifies whether to cache unread messages or not."
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Set the \"Cache unread messages\" flag",
        "description": "Sets a flag that specifies whether to cache unread messages or not."
      }
    },
    "/api/2.0/mail/settings/goNextAfterMoveEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the \"Go next after move\" flag",
        "description": "Returns a flag that specifies whether to go to the next message after moving/deleting the currently viewed or return to the current folder."
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Set the \"Go next after move\" flag",
        "description": "Sets a flag that specifies whether to go to the next message after moving/deleting the currently viewed or return to the current folder."
      }
    },
    "/api/2.0/mail/settings/replaceMessageBody": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Get the \"Replace message body\" flag",
        "description": "Returns a flag that specifies whether to completely replace text of the email when inserting a template or not."
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "summary": "Set the \"Replace message body\" flag",
        "description": "Sets a flag that specifies whether to completely replace text of the email when inserting a template or not."
      }
    },
    "/api/2.0/mail/messages/attachments/export": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Export message attachments",
        "description": "Exports all the message attachments to the folder with documents."
      }
    },
    "/api/2.0/mail/messages/attachment/export": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Export an attachment",
        "description": "Exports an attachment with the ID specified in the request to the folder with documents."
      }
    },
    "/api/2.0/mail/messages/attachment/add": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Add an attachment",
        "description": "Adds an attachment to the draft with the ID specified in the request."
      }
    },
    "/api/2.0/mail/messages/calendarbody/add": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Add a calendar",
        "description": "Adds an iCal body to the draft with the ID specified in the request."
      }
    },
    "/api/2.0/mail/messages/attachment/downloadall/{messageId}": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "summary": "Download attachments",
        "description": "Downloads all the attachments from the message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/autoreply/update/{mailboxId:[0-9]+}": {
      "post": {
        "tags": [
          "mail/Autoreply"
        ],
        "summary": "Update an autoreply",
        "description": "Updates or creates an autoreply with the parameters specified in the request."
      }
    },
    "/api/2.0/mail/operations": {
      "get": {
        "tags": [
          "mail/Operations"
        ],
        "summary": "Get running mail operations",
        "description": "Returns all the running mail operations."
      }
    },
    "/api/2.0/mail/operations/{operationId}": {
      "get": {
        "tags": [
          "mail/Operations"
        ],
        "summary": "Get a mail operation status",
        "description": "Returns a status of the mail operation with the ID specified in the request.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/helpcenter": {
      "get": {
        "tags": [
          "mail/Help Center"
        ],
        "summary": "Get the Help Center page HTML",
        "description": "Returns the Help Center page HTML."
      }
    },
    "/api/2.0/mail/signature/{mailbox_id:[0-9]+}": {
      "get": {
        "tags": [
          "mail/Signature"
        ],
        "summary": "Get a signature",
        "description": "Returns a signature of a mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mail/signature/update/{mailbox_id:[0-9]+}": {
      "post": {
        "tags": [
          "mail/Signature"
        ],
        "summary": "Update a signature",
        "description": "Updates a signature of a mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mail/accounts": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Get user accounts",
        "description": "Returns a list of all the user mailboxes, aliases, and groups."
      },
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Create an account by custom mail servers",
        "description": "Creates an account using full information about mail servers specified in the request."
      },
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Update an account",
        "description": "Updates an account with the name specified in the request."
      },
      "delete": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Delete an account",
        "description": "Deletes an account by email address specified in the request."
      }
    },
    "/api/2.0/mail/accounts/single": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Get an account by email",
        "description": "Returns the account information by the email address specified in the request."
      }
    },
    "/api/2.0/mail/accounts/simple": {
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Create an account by email and password",
        "description": "Creates an account based on the email address and password specified in the request."
      }
    },
    "/api/2.0/mail/accounts/oauth": {
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Create an OAuth account",
        "description": "Creates a mail account with OAuth (only Google OAuth is supported)."
      },
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Update an OAuth account",
        "description": "Updates a mail account with OAuth (only Google OAuth is supported)."
      }
    },
    "/api/2.0/mail/accounts/state": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Set the account status",
        "description": "Sets the status of an account with the email address specified in the request."
      }
    },
    "/api/2.0/mail/accounts/default": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Set the default account",
        "description": "Sets the default account with the email address specified in the request."
      }
    },
    "/api/2.0/mail/accounts/setups": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Get the default account settings",
        "description": "Returns the default settings for an account with the email address specified in the request."
      }
    },
    "/api/2.0/mail/accounts/emailinfolder": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Set a folder account email",
        "description": "Sets an account email in a folder with the ID specified in the request."
      }
    },
    "/api/2.0/mail/accounts/updateuseractivity": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "summary": "Update the user activity status",
        "description": "Updates the user activity status."
      }
    },
    "/api/2.0/mail/alert": {
      "get": {
        "tags": [
          "mail/Alerts"
        ],
        "summary": "Get alerts",
        "description": "Returns a list of all the alerts for the authenticated user."
      }
    },
    "/api/2.0/mail/alert/{id}": {
      "delete": {
        "tags": [
          "mail/Alerts"
        ],
        "summary": "Delete an alert",
        "description": "Deletes an alert with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Alert ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/emails/search": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "summary": "Search contacts",
        "description": "Searches for contacts by their names, last names, or emails."
      }
    },
    "/api/2.0/mail/crm/linked/entities": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "summary": "Get the linked CRM entities",
        "description": "Returns a list of the CRM entities (contact, case, or opportunity) linked with a conversation."
      }
    },
    "/api/2.0/mailserver/mailboxes/add": {
      "post": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Create a mailbox",
        "description": "Creates a mailbox with the parameters specified in the request."
      }
    },
    "/api/2.0/mailserver/mailboxes/addmy": {
      "post": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Create a mailbox with your own domain",
        "description": "Creates a mailbox with your own domain name."
      }
    },
    "/api/2.0/mailserver/mailboxes/get": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Get mailboxes",
        "description": "Returns a list of all the mailboxes associated with the tenant."
      }
    },
    "/api/2.0/mailserver/mailboxes/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Remove a mailbox",
        "description": "Deletes a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mailserver/mailboxes/update": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Update a mailbox",
        "description": "Updates a mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/add": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Add a mailbox alias",
        "description": "Adds an alias to the mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/remove": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Remove a mailbox alias",
        "description": "Removes an alias from the mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mailserver/mailboxes/changepwd": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Change a mailbox password",
        "description": "Changes a password of a mailbox with the ID specified in the request."
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/exists": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Check the mailbox address existence",
        "description": "Checks if the mailbox address is already registered or not."
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/valid": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "summary": "Check the mailbox address correctness",
        "description": "Checks if the mailbox address is valid or not."
      }
    },
    "/api/2.0/mailserver/groupaddress/address/add": {
      "put": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "summary": "Add an address to the mail group",
        "description": "Adds an address with the ID specified in the request to the mail group."
      }
    },
    "/api/2.0/mailserver/groupaddress/addresses/remove": {
      "delete": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "summary": "Remove an address from the mail group",
        "description": "Removes an address with the ID specified in the request from the mail group."
      }
    },
    "/api/2.0/mailserver/groupaddress/get": {
      "get": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "summary": "Get mail groups",
        "description": "Returns a list of mail groups associated with the tenant."
      }
    },
    "/api/2.0/mailserver/groupaddress/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "summary": "Remove a mail group",
        "description": "Deletes a mail group with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Mail group ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mailserver/notification/address/add": {
      "post": {
        "tags": [
          "mailserver/Notifications"
        ],
        "summary": "Create a notification address",
        "description": "Creates an address for the tenant notifications with the parameters specified in the request."
      }
    },
    "/api/2.0/mailserver/notification/address/remove": {
      "delete": {
        "tags": [
          "mailserver/Notifications"
        ],
        "summary": "Remove a notification address",
        "description": "Deletes an address for the tenant notifications specified in the request."
      }
    },
    "/api/2.0/mailserver/server": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "summary": "Get the mail server",
        "description": "Returns the mail server associated with the current tenant."
      }
    },
    "/api/2.0/mailserver/serverinfo/get": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "summary": "Get the mail server information",
        "description": "Returns full information on the mail server associated with the current tenant."
      }
    },
    "/api/2.0/mailserver/freedns/get": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "summary": "Get or create free DNS records",
        "description": "Returns or generates free DNS records."
      }
    },
    "/api/2.0/mailserver/domains/get": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Get web domains",
        "description": "Returns a list of all the web domains associated with the current tenant."
      }
    },
    "/api/2.0/mailserver/domains/common": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Get common web domain",
        "description": "Returns the common web domain."
      }
    },
    "/api/2.0/mailserver/domains/add": {
      "post": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Add a domain to the mail server",
        "description": "Adds a web domain to the current tenant."
      }
    },
    "/api/2.0/mailserver/domains/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Remove a domain from the mail server",
        "description": "Deletes a web domain with the ID specified in the request from the mail server.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Web domain ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/mailserver/domains/dns/get": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Get DNS records by domain ID",
        "description": "Returns DNS records related to the domain with the ID specified in the request."
      }
    },
    "/api/2.0/mailserver/domains/exists": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Check the domain name existence",
        "description": "Checks if a web domain name specified in the request already exists or not."
      }
    },
    "/api/2.0/mailserver/domains/ownership/check": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "summary": "Check the domain ownership",
        "description": "Checks if a web domain specified in the request belongs to the current user or not."
      }
    },
    "/api/2.0/portal/users/{userID}": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "summary": "Get a user by ID",
        "description": "Returns a user with the ID specified in the request from the current portal.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/users/invite/{employeeType}": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "summary": "Get an invitation link",
        "description": "Returns an invitation link for joining the portal.",
        "parameters": [
          {
            "name": "employeeType",
            "in": "path",
            "description": "Employee type (User or Visitor)",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/usedspace": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "summary": "Get the used portal space",
        "description": "Returns the used space of the current portal."
      }
    },
    "/api/2.0/portal/userscount": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "summary": "Get a number of portal users",
        "description": "Returns a number of portal users."
      }
    },
    "/api/2.0/portal/tariff": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "summary": "Get a portal tariff",
        "description": "Returns the current portal tariff."
      }
    },
    "/api/2.0/portal/quota": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "summary": "Get a portal quota",
        "description": "Returns the current portal quota."
      }
    },
    "/api/2.0/portal/quota/right": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "summary": "Get the recommended quota",
        "description": "Returns the recommended quota for the current portal."
      }
    },
    "/api/2.0/portal/getbackupschedule": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Get the backup schedule",
        "description": "Returns the backup schedule for the current portal."
      }
    },
    "/api/2.0/portal/deletebackupschedule": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Delete the backup schedule",
        "description": "Deletes the backup schedule for the current portal."
      }
    },
    "/api/2.0/portal/getbackupprogress": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Get the backup progress",
        "description": "Returns the progress of the started backup."
      }
    },
    "/api/2.0/portal/getbackuphistory": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Get the backup history",
        "description": "Returns the history of the started backup."
      }
    },
    "/api/2.0/portal/deletebackup/{id}": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Delete the backup",
        "description": "Deletes the backup with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Backup ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/deletebackuphistory": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Delete the backup history",
        "description": "Deletes the backup history of the current portal."
      }
    },
    "/api/2.0/portal/getrestoreprogress": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "summary": "Get the restoring progress",
        "description": "Returns the progress of the started restoring process."
      }
    },
    "/api/2.0/portal/search": {
      "get": {
        "tags": [
          "portal/Search"
        ],
        "summary": "Get the search settings",
        "description": "Returns the search settings."
      }
    },
    "/api/2.0/portal/search/state": {
      "get": {
        "tags": [
          "portal/Search"
        ],
        "summary": "Check the search availability",
        "description": "Checks if the search process is available or not."
      }
    },
    "/api/2.0/portal/search/reindex": {
      "post": {
        "tags": [
          "portal/Search"
        ],
        "summary": "Reindex a page",
        "description": "Reindexes a page during the search process."
      }
    },
    "/api/2.0/project/contact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Get contact projects",
        "description": "Returns a list of all the projects linked with a contact with the ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/contact": {
      "post": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Add a project contact",
        "description": "Adds the selected contact to the project with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Delete a project contact",
        "description": "Deletes the selected contact from the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/template": {
      "get": {
        "tags": [
          "project/Templates"
        ],
        "summary": "Get templates",
        "description": "Returns a list of all the templates with the base information about them."
      },
      "post": {
        "tags": [
          "project/Templates"
        ],
        "summary": "Create a template",
        "description": "Creates a new template with the title and description specified in the request."
      }
    },
    "/api/2.0/project/template/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Templates"
        ],
        "summary": "Get a template",
        "description": "Returns the detailed information about a template with the ID specified in the request."
      },
      "put": {
        "tags": [
          "project/Templates"
        ],
        "summary": "Update a template",
        "description": "Updates the existing template information with the parameters specified in the request."
      },
      "delete": {
        "tags": [
          "project/Templates"
        ],
        "summary": "Delete a template",
        "description": "Deletes a template with the ID specified in the request from the portal."
      }
    },
    "/api/2.0/project/task/@self": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get my tasks",
        "description": "Returns a list with the detailed information about all the tasks for the current user."
      }
    },
    "/api/2.0/project/task/@self/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get my tasks by status",
        "description": "Returns a list with the detailed information about the tasks for the current user with a status specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get a task",
        "description": "Returns the detailed information about a task with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request from the project."
      },
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Create a subtask",
        "description": "Creates a subtask with the title and responsible within the parent task specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "summary": "Get task files",
        "description": "Returns a list of all the files attached to the task with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Files"
        ],
        "summary": "Detach a file from a task",
        "description": "Detaches the selected file from a task with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Update a task status by task ID",
        "description": "Updates a status of a task with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/milestone": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Update a task milestone",
        "description": "Updates a milestone of a task with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/comment": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get task comments",
        "description": "Returns a list of the comments for the task with the ID specified in the request."
      },
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Add a task comment",
        "description": "Adds a comment to the selected task with the comment text and parent comment ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/notify": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Notify the task responsible",
        "description": "Notifies the responsible for the task with the ID specified in the request about the task."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/subscribe": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Subscribe to a task",
        "description": "Subscribes to the notifications about the actions performed with the selected task."
      },
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Check the task subscription",
        "description": "Checks the subscription to the notifications about the actions performed with the selected task."
      }
    },
    "/api/2.0/project/task/{parentTaskId:[0-9]+}/link": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Add a link between tasks",
        "description": "Adds a link between the dependent and parent tasks specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/link": {
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Remove a link between tasks",
        "description": "Removes a link between the dependent and parent tasks specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/copy": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Copy a subtask",
        "description": "Copies a subtask with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/move": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Move a subtask",
        "description": "Moves a subtask with the ID specified in the request to another task."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Update a subtask",
        "description": "Updates the selected subtask with the title and responsible specified in the request."
      },
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Delete a subtask",
        "description": "Deletes the selected subtask from the parent task with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Update a subtask status",
        "description": "Updates the selected subtask status of the parent task with the ID specified in the request."
      }
    },
    "/api/2.0/project/comment/{commentid}": {
      "get": {
        "tags": [
          "project/Comments"
        ],
        "summary": "Get a comment",
        "description": "Returns the information about a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "project/Comments"
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "project/Comments"
        ],
        "summary": "Update a comment",
        "description": "Updates the seleted comment using the comment text specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/comment/preview": {
      "post": {
        "tags": [
          "project/Comments"
        ],
        "summary": "Get a comment preview",
        "description": "Returns a preview of a project comment with the ID specified in the request."
      }
    },
    "/api/2.0/project/comment": {
      "post": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Add a project comment",
        "description": "Adds a project comment with the parameters specified in the request. The parent comment ID can also be selected."
      }
    },
    "/api/2.0/project/tag": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "summary": "Get project tags",
        "description": "Returns a list of all the available project tags."
      },
      "post": {
        "tags": [
          "project/Tags"
        ],
        "summary": "Create a tag",
        "description": "Creates a new tag with the data specified in the request."
      }
    },
    "/api/2.0/project/tag/{tag}": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "summary": "Get projects by a tag",
        "description": "Returns the detailed list of all the projects with a tag specified in the request.",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "description": "Tag name",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/tag/search": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "summary": "Get tags by a tag name",
        "description": "Returns a list of all the tags by the tag name specified in the request."
      }
    },
    "/api/2.0/project/milestone": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get recent milestones",
        "description": "Returns a list of the recent milestones within all the portal projects."
      }
    },
    "/api/2.0/project/milestone/upcoming": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get upcoming milestones",
        "description": "Returns a list of all the upcoming milestones within all the portal projects."
      }
    },
    "/api/2.0/project/milestone/late": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get overdue milestones",
        "description": "Returns a list of all the overdue milestones in the portal projects."
      }
    },
    "/api/2.0/project/milestone/{year}/{month}/{day}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get milestones by deadline",
        "description": "Returns a list of all the milestones with the deadline specified in the request.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Deadline year",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Deadline month",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "day",
            "in": "path",
            "description": "Deadline day",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/milestone/{year}/{month}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get milestones by deadline month",
        "description": "Returns a list of all the milestones with the deadline month specified in the request.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Deadline year",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Deadline month",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get a milestone",
        "description": "Returns the detailed information about a milestone with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Delete a milestone",
        "description": "Deletes a milestone with the ID specified in the request."
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}/task": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get milestone tasks",
        "description": "Returns a list of all the tasks from a milestone with the ID specified in the request."
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Update a milestone status",
        "description": "Updates a status of a milestone with the ID specified in the request."
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/time": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "summary": "Get task time",
        "description": "Returns the time spent on the task with the ID specified in the request."
      },
      "post": {
        "tags": [
          "project/Time"
        ],
        "summary": "Add task time",
        "description": "Adds the time to the selected task with the time parameters specified in the request."
      }
    },
    "/api/2.0/project/time/{timeid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Time"
        ],
        "summary": "Update task time",
        "description": "Updates the time for the selected task with the time parameters specified in the request."
      }
    },
    "/api/2.0/project/settings": {
      "get": {
        "tags": [
          "project/Settings"
        ],
        "summary": "Get the project settings",
        "description": "Returns the common project settings."
      }
    },
    "/api/2.0/project/status": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Create a task status",
        "description": "Creates a task status specified in the request."
      },
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Update a task status",
        "description": "Updates a task status with a value specified in the request."
      },
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get task statuses",
        "description": "Returns all the task statuses."
      }
    },
    "/api/2.0/project/status/{id}": {
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Delete a task status",
        "description": "Deletes a task status with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task status ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/message": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get messages",
        "description": "Returns a list of all the discussion messages within a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Update a message status",
        "description": "Updates the selected message status."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}": {
      "delete": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Delete a message",
        "description": "Deletes a message with the ID specified in the request from a project discussion."
      },
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get a message",
        "description": "Returns the detailed information about a discussion message with the ID specified in the request."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "summary": "Get message files",
        "description": "Returns the detailed information about files attached to the discussion message with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Files"
        ],
        "summary": "Detach a file from a message",
        "description": "Detaches the selected file from the discussion message with the ID specified in the request."
      }
    },
    "/api/2.0/project/message": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get recent messages",
        "description": "Returns a list of the recent discussion messages from a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/comment": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get message comments",
        "description": "Returns a list of the discussion message comments from a project with the ID specified in the request."
      },
      "post": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Add a message comment",
        "description": "Adds a comment to the selected discussion message with the text specified in the request. The parent comment ID can be also selected."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/subscribe": {
      "put": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Subscribe to discussion",
        "description": "Subscribes to the notifications about the actions performed in the discussion with the selected message."
      },
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Check the discussion subscription",
        "description": "Checks subscription to the notifications about the actions performed in the discussion with the selected message."
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/subscribes": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get discussion subscribers",
        "description": "Returns a list of all the subscribers to the discussion with the selected message."
      }
    },
    "/api/2.0/project/message/discussion/preview": {
      "post": {
        "tags": [
          "project/Discussions"
        ],
        "summary": "Get a message preview",
        "description": "Returns a preview of the discussion message."
      }
    },
    "/api/2.0/project/report/create": {
      "post": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Check the report data",
        "description": "Checks the report data by the URI specified in the request."
      }
    },
    "/api/2.0/project/report/status": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Get a report status",
        "description": "Returns a report status."
      }
    },
    "/api/2.0/project/report/terminate": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Terminate the reporting process",
        "description": "Terminates the reporting process."
      }
    },
    "/api/2.0/project/report/{reportid:[0-9]+}": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Get a report template",
        "description": "Returns a project report template with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Delete a report template",
        "description": "Deletes a project report template with the ID specified in the request."
      }
    },
    "/api/2.0/project/report/files": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Get generated reports",
        "description": "Returns the generated report files."
      }
    },
    "/api/2.0/project/report/files/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "project/Reports"
        ],
        "summary": "Remove the generated report",
        "description": "Removes the generated report file with the ID specified in the request."
      }
    },
    "/api/2.0/project/@self": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Get my projects",
        "description": "Returns a list of all the projects in which the current user participates."
      }
    },
    "/api/2.0/project/@follow": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Get followed projects",
        "description": "Returns a list of all the projects which the current user is following."
      }
    },
    "/api/2.0/project/{status:(open|paused|closed)}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Get projects by status",
        "description": "Returns a list of all the projects with a status specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Get a project by ID",
        "description": "Returns the detailed information about a project with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Delete a project",
        "description": "Deletes a project with the ID specified in the request from the portal."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/@search/{query}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Search in a project",
        "description": "Returns the search results for a project containing the words/phrases matching the query specified in the request.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/@search/{query}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Search projects",
        "description": "Returns a list of all the projects matching the query specified in the request.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/project/{id:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Update a project status",
        "description": "Updates a status of a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/follow": {
      "put": {
        "tags": [
          "project/Projects"
        ],
        "summary": "Project subscription",
        "description": "Subscribes to or unsubscribes from the notifications about the actions performed in the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/tag": {
      "put": {
        "tags": [
          "project/Tags"
        ],
        "summary": "Update a project tag",
        "description": "Updates a tag from the selected project with a new tag specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/time": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "summary": "Get project time",
        "description": "Returns the detailed information about the time spent on the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/time/total": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "summary": "Get total project time",
        "description": "Returns the total time spent on the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/milestone": {
      "post": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Add a milestone",
        "description": "Adds a new milestone using the parameters (project ID, milestone title, deadline, etc) specified in the request."
      },
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get milestones by project ID",
        "description": "Returns a list of all the milestones from a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/milestone/{status:(open|closed|late|disable)}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "summary": "Get milestones by milestone status",
        "description": "Returns a list of all the milestones with the selected status from a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/team": {
      "get": {
        "tags": [
          "project/Teams"
        ],
        "summary": "Get a project team",
        "description": "Returns a list of all the users participating in the project with the ID specified in the request."
      },
      "post": {
        "tags": [
          "project/Teams"
        ],
        "summary": "Add a user to the team",
        "description": "Adds a user with the ID specified in the request to the selected project team."
      },
      "delete": {
        "tags": [
          "project/Teams"
        ],
        "summary": "Remove a user from the team",
        "description": "Removes a user with the ID specified in the request from the selected project team."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/teamExcluded": {
      "get": {
        "tags": [
          "project/Teams"
        ],
        "summary": "Get current and excluded team members",
        "description": "Returns a list of all the current and excluded project team members."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/team/security": {
      "put": {
        "tags": [
          "project/Teams"
        ],
        "summary": "Set team security",
        "description": "Sets the security rights to the user with the ID specified in the request from the selected project."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get tasks",
        "description": "Returns a list of all the tasks from a project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/{messageid:[0-9]+}": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Add a task by message ID",
        "description": "Adds a task to the selected project by the message ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get tasks by status",
        "description": "Returns a list of all the tasks with the selected status in the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/@self/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "summary": "Get my tasks by status",
        "description": "Returns a list of all the tasks for the current user with the selected status in the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{id:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "summary": "Get project files",
        "description": "Returns the detailed list of all the files and folders for the project with the ID specified in the request."
      }
    },
    "/api/2.0/project/{entityID:[0-9]+}/entityfiles": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "summary": "Get entity files",
        "description": "Returns a list of all the files for the entity with the type and ID specified in the request."
      }
    },
    "/api/2.0/security//audit/login/last": {
      "get": {
        "tags": [
          "security/Login history"
        ],
        "summary": "Get login history",
        "description": "Returns all the latest user login activity including successful logins and failed attempts with an indication of reasons."
      }
    },
    "/api/2.0/security//audit/events/last": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get audit trail data",
        "description": "Returns a list of the latest changes (creation, modification, deletion, etc.) made by users to the entities (tasks, opportunities, files, etc.) on the portal."
      }
    },
    "/api/2.0/security//audit/login/filter": {
      "get": {
        "tags": [
          "security/Login history"
        ],
        "summary": "Get filtered login events",
        "description": "Returns a list of the login events by the parameters specified in the request."
      }
    },
    "/api/2.0/security//audit/events/filter": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get filtered audit trail data",
        "description": "Returns a list of the audit events by the parameters specified in the request."
      }
    },
    "/api/2.0/security//audit/types": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get audit trail types",
        "description": "Returns all the available audit trail types."
      }
    },
    "/api/2.0/security//audit/login/report": {
      "post": {
        "tags": [
          "security/Login history"
        ],
        "summary": "Generate the login history report",
        "description": "Generates the login history report."
      }
    },
    "/api/2.0/security//audit/events/report": {
      "post": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Generate the audit trail report",
        "description": "Generates the audit trail report."
      }
    },
    "/api/2.0/security//audit/settings/lifetime": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get the audit trail settings",
        "description": "Returns the audit trail settings."
      },
      "post": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Set the audit trail settings",
        "description": "Sets the audit trail settings for the current portal."
      }
    },
    "/api/2.0/security//activeconnections": {
      "get": {
        "tags": [
          "security/Active connections"
        ],
        "summary": "Get active connections",
        "description": "Returns all the active connections to the portal."
      }
    },
    "/api/2.0/security//activeconnections/logoutallchangepassword": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "summary": "Log out and change password",
        "description": "Logs out from all the active connections for the current user and changes their password."
      }
    },
    "/api/2.0/security//activeconnections/logoutall/{userId}": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "summary": "Log out for the user by ID",
        "description": "Logs out from all the active connections for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/security//activeconnections/logoutallexceptthis": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "summary": "Log out from all connections",
        "description": "Logs out from all the active connections except the current connection."
      }
    },
    "/api/2.0/security//activeconnections/logout/{loginEventId}": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "summary": "Log out from the connection",
        "description": "Logs out from the connection with the ID specified in the request.",
        "parameters": [
          {
            "name": "loginEventId",
            "in": "path",
            "description": "Login event ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/security//loginsettings": {
      "put": {
        "tags": [
          "security/Login history"
        ],
        "summary": "Update login settings",
        "description": "Updates the login settings with the parameters specified in the request."
      }
    },
    "/api/2.0/security//impersonate/settings": {
      "get": {
        "tags": [
          "security/Impersonation"
        ],
        "summary": "Get impersonation settings",
        "description": "Returns the impersonation settings for the current portal."
      }
    },
    "/api/2.0/security//impersonate/{userId}": {
      "get": {
        "tags": [
          "security/Impersonation"
        ],
        "summary": "Check user impersonation",
        "description": "Checks if a user with the ID specified in the request can be impersonated or not.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "security/Impersonation"
        ],
        "summary": "Impersonate a user",
        "description": "Impersonates a user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/security//impersonate/logout": {
      "put": {
        "tags": [
          "security/Impersonation"
        ],
        "summary": "Log out impersonated user",
        "description": "Log out from the account of the impersonated user."
      }
    },
    "/api/2.0/settings/iprestrictions/settings": {
      "put": {
        "tags": [
          "settings/IP restrictions"
        ],
        "summary": "Update the IP restrictions",
        "description": "Updates the IP restriction settings with a parameter specified in the request."
      }
    },
    "/api/2.0/settings/tips": {
      "put": {
        "tags": [
          "settings/Tips"
        ],
        "summary": "Update the tip settings",
        "description": "Updates the tip settings with a parameter specified in the request."
      }
    },
    "/api/2.0/settings/tips/change/subscription": {
      "put": {
        "tags": [
          "settings/Tips"
        ],
        "summary": "Update the tip subscription",
        "description": "Updates the tip subscription."
      }
    },
    "/api/2.0/settings/tfaappnewcodes": {
      "put": {
        "tags": [
          "settings/TFA settings"
        ],
        "summary": "Request the TFA codes",
        "description": "Requests the new backup codes for the two-factor authentication application."
      }
    },
    "/api/2.0/settings/tfaappnewapp": {
      "put": {
        "tags": [
          "settings/TFA settings"
        ],
        "summary": "Unlink the TFA application",
        "description": "Unlinks the current two-factor authentication application from the user account specified in the request."
      }
    },
    "/api/2.0/settings/tfaapp": {
      "get": {
        "tags": [
          "settings/TFA settings"
        ],
        "summary": "Get TFA settings",
        "description": "Returns the current two-factor authentication settings."
      }
    },
    "/api/2.0/settings/push/docregisterdevice": {
      "post": {
        "tags": [
          "settings/Firebase"
        ],
        "summary": "Saves the Documents Firebase device token",
        "description": "Saves the Firebase device token specified in the request for the Documents application."
      }
    },
    "/api/2.0/settings/push/projregisterdevice": {
      "post": {
        "tags": [
          "settings/Firebase"
        ],
        "summary": "Saves the Projects Firebase device token",
        "description": "Saves the Firebase device token specified in the request for the Projects application."
      }
    },
    "/api/2.0/settings/telegramisconnected": {
      "get": {
        "tags": [
          "settings/Telegram"
        ],
        "summary": "Check the Telegram connection",
        "description": "Checks if the current user is connected to the Telegram Bot or not."
      }
    },
    "/api/2.0/settings/telegramdisconnect": {
      "delete": {
        "tags": [
          "settings/Telegram"
        ],
        "summary": "Unlink Telegram",
        "description": "Unlinks the Telegram Bot from your account."
      }
    },
    "/api/2.0/settings/welcome/close": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "summary": "Close the welcome pop-up notification",
        "description": "Closes the welcome pop-up notification."
      }
    },
    "/api/2.0/settings/closeadminhelper": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "summary": "Close the admin helper notification",
        "description": "Closes the admin helper notification."
      }
    },
    "/api/2.0/settings/customnavigation/getall": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "summary": "Get the custom navigation items",
        "description": "Returns a list of the custom navigation items."
      }
    },
    "/api/2.0/settings/customnavigation/getsample": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "summary": "Get a custom navigation item sample",
        "description": "Returns a custom navigation item sample."
      }
    },
    "/api/2.0/settings/customnavigation/get/{id}": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "summary": "Get a custom navigation item by ID",
        "description": "Returns a custom navigation item by the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/customnavigation/create": {
      "post": {
        "tags": [
          "settings/Custom navigation"
        ],
        "summary": "Add a custom navigation item",
        "description": "Adds a custom navigation item with the parameters specified in the request."
      }
    },
    "/api/2.0/settings/customnavigation/delete/{id}": {
      "delete": {
        "tags": [
          "settings/Custom navigation"
        ],
        "summary": "Delete a custom navigation item",
        "description": "Deletes a custom navigation item with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/emailactivation": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "summary": "Update the email activation settings",
        "description": "Updates the email activation settings."
      }
    },
    "/api/2.0/settings/statistics/spaceusage/{id}": {
      "get": {
        "tags": [
          "settings/Statistics"
        ],
        "summary": "Get the space usage statistics",
        "description": "Returns the space usage statistics of the module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/statistics/visit": {
      "get": {
        "tags": [
          "settings/Statistics"
        ],
        "summary": "Get the visit statistics",
        "description": "Returns the user visit statistics for the period specified in the request."
      }
    },
    "/api/2.0/settings/storage": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Get storages",
        "description": "Returns a list of all the portal storages."
      },
      "delete": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Reset the storage settings",
        "description": "Resets the storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/progress": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Get the storage progress",
        "description": "Returns the storage progress."
      }
    },
    "/api/2.0/settings/storage/cdn": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Get the CDN storages",
        "description": "Returns a list of all the CDN storages."
      },
      "delete": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Reset the CDN storage settings",
        "description": "Resets the CDN storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/backup": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Get the backup storages",
        "description": "Returns a list of all the backup storages."
      }
    },
    "/api/2.0/settings/storage/s3/regions": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "summary": "Get Amazon regions",
        "description": "Returns a list of all Amazon regions."
      }
    },
    "/api/2.0/settings/socket": {
      "get": {
        "tags": [
          "settings/Common settings"
        ],
        "summary": "Get the socket settings",
        "description": "Returns the socket settings."
      }
    },
    "/api/2.0/settings/smtp": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "summary": "Get the SMTP settings",
        "description": "Returns the current portal SMTP settings."
      },
      "post": {
        "tags": [
          "settings/SMTP"
        ],
        "summary": "Save the SMTP settings",
        "description": "Saves the SMTP settings for the current portal."
      },
      "delete": {
        "tags": [
          "settings/SMTP"
        ],
        "summary": "Reset the SMTP settings",
        "description": "Resets SMTP settings of the current portal."
      }
    },
    "/api/2.0/settings/smtp/test": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "summary": "Test the SMTP settings",
        "description": "Tests the SMTP settings for the current portal (send test message to the user email)."
      }
    },
    "/api/2.0/settings/smtp/test/status": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "summary": "Get the SMTP test process status",
        "description": "Returns the SMTP test process status."
      }
    },
    "/api/2.0/settings/ssov2": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "summary": "Get the SSO settings",
        "description": "Returns the current portal SSO settings."
      },
      "post": {
        "tags": [
          "settings/SSO"
        ],
        "summary": "Save the SSO settings",
        "description": "Saves the SSO settings for the current portal."
      },
      "delete": {
        "tags": [
          "settings/SSO"
        ],
        "summary": "Reset the SSO settings",
        "description": "Resets the SSO settings of the current portal."
      }
    },
    "/api/2.0/settings/ssov2/default": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "summary": "Get the default SSO settings",
        "description": "Returns the default portal SSO settings."
      }
    },
    "/api/2.0/settings/ssov2/constants": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "summary": "Get the SSO settings constants",
        "description": "Returns the SSO settings constants."
      }
    },
    "/api/2.0/settings/ldap": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Get the LDAP settings",
        "description": "Returns the current portal LDAP settings."
      },
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Save the LDAP settings",
        "description": "Saves the LDAP settings specified in the request and starts importing/synchronizing users and groups by LDAP."
      }
    },
    "/api/2.0/settings/ldap/cron": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Get the LDAP cron expression",
        "description": "Returns the LDAP autosynchronous cron expression for the current portal if it exists."
      },
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Set the LDAP cron expression",
        "description": "Sets the LDAP autosynchronous cron expression to the current portal."
      }
    },
    "/api/2.0/settings/ldap/sync": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Synchronize with LDAP server",
        "description": "Synchronizes the portal data with the new information from the LDAP server."
      }
    },
    "/api/2.0/settings/ldap/sync/test": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Test the LDAP synchronization",
        "description": "Starts the process of collecting preliminary changes on the portal during the synchronization process according to the selected LDAP settings."
      }
    },
    "/api/2.0/settings/ldap/save/test": {
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Test the LDAP saving process",
        "description": "Starts the process of saving LDAP settings and collecting preliminary changes on the portal according to them."
      }
    },
    "/api/2.0/settings/ldap/status": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Get the LDAP synchronization process status",
        "description": "Returns the LDAP synchronization process status."
      }
    },
    "/api/2.0/settings/ldap/default": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "summary": "Get the LDAP default settings",
        "description": "Returns the LDAP default settings."
      }
    },
    "/api/2.0/settings/quota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "summary": "Get the space usage",
        "description": "Returns the space usage quota for the portal with the specified space usage for each module."
      }
    },
    "/api/2.0/settings/userquotasettings": {
      "post": {
        "tags": [
          "settings/User quota"
        ],
        "summary": "Save user quota limit",
        "description": "Save user quota limit"
      }
    },
    "/api/2.0/settings/tenantquotasettings": {
      "put": {
        "tags": [
          "settings/Tenant quota"
        ],
        "summary": "Set tenant quota settings",
        "description": "Set tenant quota settings"
      }
    },
    "/api/2.0/settings/recalculatequota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "summary": "Recalculate quota",
        "description": "Starts the process of recalculating quota."
      }
    },
    "/api/2.0/settings/checkrecalculatequota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "summary": "Check quota recalculation",
        "description": "Checks the process of recalculating quota."
      }
    },
    "/api/2.0/settings/recalculateuserquota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "summary": "Recalculates quota",
        "description": "Starts the process of recalculating users quota."
      }
    },
    "/api/2.0/settings/checkrecalculateuserquota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "summary": "Check users quota recalculating",
        "description": "Checks the process of recalculating users quota."
      }
    },
    "/api/2.0/settings/security/{id}": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Get the module availability",
        "description": "Returns the availability of the module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/security/password": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Get the password settings",
        "description": "Returns the portal password settings."
      },
      "put": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Set the password settings",
        "description": "Sets the portal password settings."
      }
    },
    "/api/2.0/settings/security/administrator/{productid}": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Get the product administrators",
        "description": "Returns a list of all the administrators of the product with the ID specified in the request.",
        "parameters": [
          {
            "name": "productid",
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "object"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/security/administrator": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Check the product administrator",
        "description": "Checks if the selected user is an administrator of a product with the ID specified in the request."
      },
      "put": {
        "tags": [
          "settings/Security"
        ],
        "summary": "Set the product administrator",
        "description": "Sets the selected user as an administrator of a product with the ID specified in the request."
      }
    },
    "/api/2.0/settings/logo": {
      "get": {
        "tags": [
          "settings/Common settings"
        ],
        "summary": "Get a portal logo",
        "description": "Returns the portal logo image URL."
      }
    },
    "/api/2.0/settings//iprestrictions": {
      "get": {
        "tags": [
          "settings/IP restrictions"
        ],
        "summary": "Get the IP portal restrictions",
        "description": "Returns the IP portal restrictions."
      }
    }
  }
}
